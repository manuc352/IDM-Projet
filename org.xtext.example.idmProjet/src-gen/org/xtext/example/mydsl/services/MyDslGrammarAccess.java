/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Json");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEFT_BRACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPairsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPairsPairParserRuleCall_2_0 = (RuleCall)cPairsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPAIR_SEPARATIONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cPairsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_3_1_0 = (RuleCall)cPairsAssignment_3_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsJsonOperationParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		
		//Json:
		//	{Json} LEFT_BRACE
		//	pairs+=Pair? (PAIR_SEPARATION pairs+=Pair)*
		//	RIGHT_BRACE
		//	operations+=JsonOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Json} LEFT_BRACE
		//pairs+=Pair? (PAIR_SEPARATION pairs+=Pair)*
		//RIGHT_BRACE
		//operations+=JsonOperation*
		public Group getGroup() { return cGroup; }
		
		//{Json}
		public Action getJsonAction_0() { return cJsonAction_0; }
		
		//LEFT_BRACE
		public RuleCall getLEFT_BRACETerminalRuleCall_1() { return cLEFT_BRACETerminalRuleCall_1; }
		
		//pairs+=Pair?
		public Assignment getPairsAssignment_2() { return cPairsAssignment_2; }
		
		//Pair
		public RuleCall getPairsPairParserRuleCall_2_0() { return cPairsPairParserRuleCall_2_0; }
		
		//(PAIR_SEPARATION pairs+=Pair)*
		public Group getGroup_3() { return cGroup_3; }
		
		//PAIR_SEPARATION
		public RuleCall getPAIR_SEPARATIONTerminalRuleCall_3_0() { return cPAIR_SEPARATIONTerminalRuleCall_3_0; }
		
		//pairs+=Pair
		public Assignment getPairsAssignment_3_1() { return cPairsAssignment_3_1; }
		
		//Pair
		public RuleCall getPairsPairParserRuleCall_3_1_0() { return cPairsPairParserRuleCall_3_1_0; }
		
		//RIGHT_BRACE
		public RuleCall getRIGHT_BRACETerminalRuleCall_4() { return cRIGHT_BRACETerminalRuleCall_4; }
		
		//operations+=JsonOperation*
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }
		
		//JsonOperation
		public RuleCall getOperationsJsonOperationParserRuleCall_5_0() { return cOperationsJsonOperationParserRuleCall_5_0; }
	}
	public class JsonOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JsonOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFichierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSearchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClearParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//JsonOperation:
		//	Fichier | Add | Search | Delete | Clear;
		@Override public ParserRule getRule() { return rule; }
		
		//Fichier | Add | Search | Delete | Clear
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Fichier
		public RuleCall getFichierParserRuleCall_0() { return cFichierParserRuleCall_0; }
		
		//Add
		public RuleCall getAddParserRuleCall_1() { return cAddParserRuleCall_1; }
		
		//Search
		public RuleCall getSearchParserRuleCall_2() { return cSearchParserRuleCall_2; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_3() { return cDeleteParserRuleCall_3; }
		
		//Clear
		public RuleCall getClearParserRuleCall_4() { return cClearParserRuleCall_4; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cCOLON_SEPARATIONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Pair:
		//	key=STRING COLON_SEPARATION value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING COLON_SEPARATION value=Value
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//COLON_SEPARATION
		public RuleCall getCOLON_SEPARATIONTerminalRuleCall_1() { return cCOLON_SEPARATIONTerminalRuleCall_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJNumberParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value:
		//	Json | JString | JArray | JBoolean | Null | JNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//Json | JString | JArray | JBoolean | Null | JNumber
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Json
		public RuleCall getJsonParserRuleCall_0() { return cJsonParserRuleCall_0; }
		
		//JString
		public RuleCall getJStringParserRuleCall_1() { return cJStringParserRuleCall_1; }
		
		//JArray
		public RuleCall getJArrayParserRuleCall_2() { return cJArrayParserRuleCall_2; }
		
		//JBoolean
		public RuleCall getJBooleanParserRuleCall_3() { return cJBooleanParserRuleCall_3; }
		
		//Null
		public RuleCall getNullParserRuleCall_4() { return cNullParserRuleCall_4; }
		
		//JNumber
		public RuleCall getJNumberParserRuleCall_5() { return cJNumberParserRuleCall_5; }
	}
	public class JStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//JString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class JArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPAIR_SEPARATIONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//JArray:
		//	{JArray} LEFT_BRACKET values+=Value? (PAIR_SEPARATION values+=Value)* RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//{JArray} LEFT_BRACKET values+=Value? (PAIR_SEPARATION values+=Value)* RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//{JArray}
		public Action getJArrayAction_0() { return cJArrayAction_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_1() { return cLEFT_BRACKETTerminalRuleCall_1; }
		
		//values+=Value?
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }
		
		//(PAIR_SEPARATION values+=Value)*
		public Group getGroup_3() { return cGroup_3; }
		
		//PAIR_SEPARATION
		public RuleCall getPAIR_SEPARATIONTerminalRuleCall_3_0() { return cPAIR_SEPARATIONTerminalRuleCall_3_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_3_1_0() { return cValuesValueParserRuleCall_3_1_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_4() { return cRIGHT_BRACKETTerminalRuleCall_4; }
	}
	public class JBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JBoolean");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValTrueKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValFalseKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		
		//JBoolean:
		//	val=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//val=('true' | 'false')
		public Assignment getValAssignment() { return cValAssignment; }
		
		//('true' | 'false')
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }
		
		//'true'
		public Keyword getValTrueKeyword_0_0() { return cValTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValFalseKeyword_0_1() { return cValFalseKeyword_0_1; }
	}
	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Null");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNullKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//Null:
		//	val='null';
		@Override public ParserRule getRule() { return rule; }
		
		//val='null'
		public Assignment getValAssignment() { return cValAssignment; }
		
		//'null'
		public Keyword getValNullKeyword_0() { return cValNullKeyword_0; }
	}
	public class JNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cEKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cEKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		
		//JNumber:
		//	{JNumber} '-'? INT? '.'? INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JNumber} '-'? INT? '.'? INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//{JNumber}
		public Action getJNumberAction_0() { return cJNumberAction_0; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'?
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//'E'
		public Keyword getEKeyword_5_0_0() { return cEKeyword_5_0_0; }
		
		//'e'
		public Keyword getEKeyword_5_0_1() { return cEKeyword_5_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_5_1() { return cHyphenMinusKeyword_5_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_2() { return cINTTerminalRuleCall_5_2; }
	}
	public class FichierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fichier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileIDIDTerminalRuleCall_1_0 = (RuleCall)cFileIDAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Fichier:
		//	"file" fileID=ID '=' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"file" fileID=ID '=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//"file"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//fileID=ID
		public Assignment getFileIDAssignment_1() { return cFileIDAssignment_1; }
		
		//ID
		public RuleCall getFileIDIDTerminalRuleCall_1_0() { return cFileIDIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileIDIDTerminalRuleCall_1_0 = (RuleCall)cFileIDAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPairAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairPairParserRuleCall_3_0 = (RuleCall)cPairAssignment_3.eContents().get(0);
		
		//Add:
		//	"add" fileID=ID "," pair=Pair;
		@Override public ParserRule getRule() { return rule; }
		
		//"add" fileID=ID "," pair=Pair
		public Group getGroup() { return cGroup; }
		
		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//fileID=ID
		public Assignment getFileIDAssignment_1() { return cFileIDAssignment_1; }
		
		//ID
		public RuleCall getFileIDIDTerminalRuleCall_1_0() { return cFileIDIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//pair=Pair
		public Assignment getPairAssignment_3() { return cPairAssignment_3; }
		
		//Pair
		public RuleCall getPairPairParserRuleCall_3_0() { return cPairPairParserRuleCall_3_0; }
	}
	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Clear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileIDIDTerminalRuleCall_1_0 = (RuleCall)cFileIDAssignment_1.eContents().get(0);
		
		//Clear:
		//	"clear" fileID=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"clear" fileID=ID
		public Group getGroup() { return cGroup; }
		
		//"clear"
		public Keyword getClearKeyword_0() { return cClearKeyword_0; }
		
		//fileID=ID
		public Assignment getFileIDAssignment_1() { return cFileIDAssignment_1; }
		
		//ID
		public RuleCall getFileIDIDTerminalRuleCall_1_0() { return cFileIDIDTerminalRuleCall_1_0; }
	}
	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Search");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileIDIDTerminalRuleCall_1_0 = (RuleCall)cFileIDAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeySTRINGTerminalRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		
		//Search:
		//	"search" fileID=ID "," key=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"search" fileID=ID "," key=STRING
		public Group getGroup() { return cGroup; }
		
		//"search"
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//fileID=ID
		public Assignment getFileIDAssignment_1() { return cFileIDAssignment_1; }
		
		//ID
		public RuleCall getFileIDIDTerminalRuleCall_1_0() { return cFileIDIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//key=STRING
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_3_0() { return cKeySTRINGTerminalRuleCall_3_0; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileIDIDTerminalRuleCall_1_0 = (RuleCall)cFileIDAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPairAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairPairParserRuleCall_3_0 = (RuleCall)cPairAssignment_3.eContents().get(0);
		
		//Delete:
		//	"delete" fileID=ID "," pair=Pair;
		@Override public ParserRule getRule() { return rule; }
		
		//"delete" fileID=ID "," pair=Pair
		public Group getGroup() { return cGroup; }
		
		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//fileID=ID
		public Assignment getFileIDAssignment_1() { return cFileIDAssignment_1; }
		
		//ID
		public RuleCall getFileIDIDTerminalRuleCall_1_0() { return cFileIDIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//pair=Pair
		public Assignment getPairAssignment_3() { return cPairAssignment_3; }
		
		//Pair
		public RuleCall getPairPairParserRuleCall_3_0() { return cPairPairParserRuleCall_3_0; }
	}
	
	
	private final JsonElements pJson;
	private final JsonOperationElements pJsonOperation;
	private final PairElements pPair;
	private final ValueElements pValue;
	private final JStringElements pJString;
	private final JArrayElements pJArray;
	private final JBooleanElements pJBoolean;
	private final NullElements pNull;
	private final JNumberElements pJNumber;
	private final FichierElements pFichier;
	private final AddElements pAdd;
	private final ClearElements pClear;
	private final SearchElements pSearch;
	private final DeleteElements pDelete;
	private final TerminalRule tLEFT_BRACE;
	private final TerminalRule tPAIR_SEPARATION;
	private final TerminalRule tRIGHT_BRACE;
	private final TerminalRule tCOLON_SEPARATION;
	private final TerminalRule tLEFT_BRACKET;
	private final TerminalRule tRIGHT_BRACKET;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJson = new JsonElements();
		this.pJsonOperation = new JsonOperationElements();
		this.pPair = new PairElements();
		this.pValue = new ValueElements();
		this.pJString = new JStringElements();
		this.pJArray = new JArrayElements();
		this.pJBoolean = new JBooleanElements();
		this.pNull = new NullElements();
		this.pJNumber = new JNumberElements();
		this.pFichier = new FichierElements();
		this.pAdd = new AddElements();
		this.pClear = new ClearElements();
		this.pSearch = new SearchElements();
		this.pDelete = new DeleteElements();
		this.tLEFT_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_BRACE");
		this.tPAIR_SEPARATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PAIR_SEPARATION");
		this.tRIGHT_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_BRACE");
		this.tCOLON_SEPARATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COLON_SEPARATION");
		this.tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_BRACKET");
		this.tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_BRACKET");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Json:
	//	{Json} LEFT_BRACE
	//	pairs+=Pair? (PAIR_SEPARATION pairs+=Pair)*
	//	RIGHT_BRACE
	//	operations+=JsonOperation*;
	public JsonElements getJsonAccess() {
		return pJson;
	}
	
	public ParserRule getJsonRule() {
		return getJsonAccess().getRule();
	}
	
	//JsonOperation:
	//	Fichier | Add | Search | Delete | Clear;
	public JsonOperationElements getJsonOperationAccess() {
		return pJsonOperation;
	}
	
	public ParserRule getJsonOperationRule() {
		return getJsonOperationAccess().getRule();
	}
	
	//Pair:
	//	key=STRING COLON_SEPARATION value=Value;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//Value:
	//	Json | JString | JArray | JBoolean | Null | JNumber;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//JString:
	//	val=STRING;
	public JStringElements getJStringAccess() {
		return pJString;
	}
	
	public ParserRule getJStringRule() {
		return getJStringAccess().getRule();
	}
	
	//JArray:
	//	{JArray} LEFT_BRACKET values+=Value? (PAIR_SEPARATION values+=Value)* RIGHT_BRACKET;
	public JArrayElements getJArrayAccess() {
		return pJArray;
	}
	
	public ParserRule getJArrayRule() {
		return getJArrayAccess().getRule();
	}
	
	//JBoolean:
	//	val=('true' | 'false');
	public JBooleanElements getJBooleanAccess() {
		return pJBoolean;
	}
	
	public ParserRule getJBooleanRule() {
		return getJBooleanAccess().getRule();
	}
	
	//Null:
	//	val='null';
	public NullElements getNullAccess() {
		return pNull;
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}
	
	//JNumber:
	//	{JNumber} '-'? INT? '.'? INT (('E' | 'e') '-'? INT)?;
	public JNumberElements getJNumberAccess() {
		return pJNumber;
	}
	
	public ParserRule getJNumberRule() {
		return getJNumberAccess().getRule();
	}
	
	//Fichier:
	//	"file" fileID=ID '=' name=STRING;
	public FichierElements getFichierAccess() {
		return pFichier;
	}
	
	public ParserRule getFichierRule() {
		return getFichierAccess().getRule();
	}
	
	//Add:
	//	"add" fileID=ID "," pair=Pair;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Clear:
	//	"clear" fileID=ID;
	public ClearElements getClearAccess() {
		return pClear;
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}
	
	//Search:
	//	"search" fileID=ID "," key=STRING;
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}
	
	//Delete:
	//	"delete" fileID=ID "," pair=Pair;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//terminal LEFT_BRACE:
	//	'{';
	public TerminalRule getLEFT_BRACERule() {
		return tLEFT_BRACE;
	}
	
	//terminal PAIR_SEPARATION:
	//	';';
	public TerminalRule getPAIR_SEPARATIONRule() {
		return tPAIR_SEPARATION;
	}
	
	//terminal RIGHT_BRACE:
	//	'}';
	public TerminalRule getRIGHT_BRACERule() {
		return tRIGHT_BRACE;
	}
	
	//terminal COLON_SEPARATION:
	//	':';
	public TerminalRule getCOLON_SEPARATIONRule() {
		return tCOLON_SEPARATION;
	}
	
	//terminal LEFT_BRACKET:
	//	'[';
	public TerminalRule getLEFT_BRACKETRule() {
		return tLEFT_BRACKET;
	}
	
	//terminal RIGHT_BRACKET:
	//	']';
	public TerminalRule getRIGHT_BRACKETRule() {
		return tRIGHT_BRACKET;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
