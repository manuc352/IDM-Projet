/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.myDsl.Json;
import org.xtext.example.mydsl.tests.JavaCompiler;
import org.xtext.example.mydsl.tests.MyDslInjectorProvider;
import org.xtext.example.mydsl.tests.PythonCompiler;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<Json> parseHelper;
  
  private long debut;
  
  private int i;
  
  @Test
  public void loadModel() {
    try {
      this.debut = System.currentTimeMillis();
      this.i = 1;
      while ((this.i <= 8)) {
        {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("{} file json_");
          String _plus = (_builder.toString() + Integer.valueOf(this.i));
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(" ");
          _builder_1.append("= \"json_6.json\"");
          _builder_1.newLine();
          _builder_1.append("\t\t\t");
          _builder_1.append("add json_");
          String _plus_1 = (_plus + _builder_1);
          String _plus_2 = (_plus_1 + Integer.valueOf(this.i));
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(", \"bidule\":\"chose\"");
          _builder_2.newLine();
          _builder_2.append("\t\t\t");
          _builder_2.append("search json_");
          String _plus_3 = (_plus_2 + _builder_2);
          String _plus_4 = (_plus_3 + Integer.valueOf(this.i));
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append(", \"city\"");
          _builder_3.newLine();
          _builder_3.append("\t\t\t");
          _builder_3.append("delete json_");
          String _plus_5 = (_plus_4 + _builder_3);
          String _plus_6 = (_plus_5 + Integer.valueOf(this.i));
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append(", \"tales\": \"comfortable\"");
          _builder_4.newLine();
          String _plus_7 = (_plus_6 + _builder_4);
          final Json result = this.parseHelper.parse(_plus_7);
          Assertions.assertNotNull(result);
          final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
          boolean _isEmpty = errors.isEmpty();
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("Unexpected errors: ");
          String _join = IterableExtensions.join(errors, ", ");
          _builder_5.append(_join);
          Assertions.assertTrue(_isEmpty, _builder_5.toString());
          final PythonCompiler cmpPython = new PythonCompiler(result);
          cmpPython.compileAndRun();
          final JavaCompiler cmpJava = new JavaCompiler(result);
          cmpJava.compileAndRun();
          this.i++;
        }
      }
      long _currentTimeMillis = System.currentTimeMillis();
      long _minus = (_currentTimeMillis - this.debut);
      System.out.println(_minus);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
